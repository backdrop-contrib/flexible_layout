<?php
/**
 * @file
 * Flexible layout module.
 */

include_once('flexible.inc');

  
/**
 * Implements hook_menu().
 */
function flexible_layout_menu() {
  $items = array();
  $base = array(
    'access arguments' => array('administer layouts'),
    'theme callback' => 'ajax_base_page_theme',
  );

  $items['admin/structure/layouts/manage/%layout_tempstore/add-flexible-block/%/%'] = array(
    'title' => 'Add block',
    'page callback' => 'flexible_layout_block_add_page',
    'page arguments' => array(4, 6, 7),
  ) + $base;

  $items['admin/structure/layouts/manage/%layout_tempstore/flexible-layout/%/settings/%'] = array(
    'title' => 'Edit settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexible_layout_edit_settings', 4, 6, 7, 8),
  ) + $base;

  $items['admin/structure/layouts/manage/%layout_tempstore/flexible-layout/%/add/%'] = array(
    'title' => 'Add item',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexible_layout_add_item_form', 4, 6, 7, 8),
  ) + $base;

  $items['admin/structure/layouts/manage/%layout_tempstore/flexible-layout/%/remove/%'] = array(
    'title' => 'Remove item',
    'page callback' => 'flexible_layout_ajax_flexible_edit_remove',
    'page arguments' => array(4, 6, 8),
  ) + $base;

  $items['admin/structure/layouts/manage/%layout_tempstore/flexible-layout/%/resize'] = array(
    'title' => 'Remove item',
    'page callback' => 'flexible_layout_ajax_flexible_edit_resize',
    'page arguments' => array(4, 6),
  ) + $base;

  return $items;
}

/**
 * Implements hook_layout_renderer_info().
 */
function flexible_layout_layout_renderer_info() {
  $info['flexible'] = array(
    'class' => 'FlexibleLayoutRenderer',
  );
  $info['flexible_editor'] = array(
    'class' => 'FlexibleLayoutRendererEditor',
  );
  return $info;
}

/**
 * Implements hook_autoload_info().
 */
function flexible_layout_autoload_info() {
  return array(
    'FlexibleLayoutRenderer' => 'renderers/flexible_renderer_standard.inc',
    'FlexibleLayoutRendererEditor' => 'renderers/flexible_renderer_editor.inc',
  );
}


function flexible_layout_layout_presave($layout) {
  if ($layout->layout_template == 'flexible_template' && empty($layout->settings['flexible'])) {
    $layout->settings['flexible'] = flexible_layout_default_settings();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Used here to override the default layout renderer.
 */
function flexible_layout_form_layout_content_form_alter(&$form, &$form_state, $form_id) {
  $layout = $form_state['layout'];
  if ($layout->layout_template == 'flexible_template') {
    $renderer = layout_create_renderer('flexible_editor', $layout);
    $form['content']['display'] = array(
      '#markup' => $renderer->render(),
    );

    foreach ($renderer->layout_info['regions'] as $region_id => $title) {
      // Make sure we at least have an empty array for all possible locations.
      if (!isset($layout->positions[$region_id])) {
        $layout->positions[$region_id] = array();
      }

      $form['content']['positions'][$region_id] = array(
        // Use 'hidden' instead of 'value' so the JS can access it.
        '#type' => 'hidden',
        '#default_value' => implode(',', $layout->positions[$region_id]),
      );
    }
  }
}

/**
 * Implements hook_theme()
 */
function flexible_layout_theme() {
  $items = array(
    'flexible_layout_admin' => array(
      'variables' => array('content' => NULL, 'settings' => NULL, 'layout' => NULL, 'renderer' => NULL),
    ),
  );
  return $items;
}

/**
 * Builds the flexible layout block add page.
 */
function theme_flexible_layout_admin($vars) {
  $content = $vars['content'];
  $settings = $vars['layout']->settings['flexible'];
  $layout = $vars['layout'];
  $handler = $vars['renderer'];

  $output = '';
  $renderer = flexible_layout_create_renderer(TRUE, $content, $settings, $layout, $handler);

  $css = flexible_layout_render_css($renderer);

  // For the administrative view, add CSS directly to head.
  backdrop_add_css($css, array('type' => 'inline', 'preprocess' => FALSE));

  $output = "<div class=\"panel-flexible " . $renderer->base['canvas'] . " clearfix panel-flexible-admin panel-flexible-edit-layout\" $renderer->id_str>\n";

  $output .= "<div class=\"panel-flexible-inside " . $renderer->base['canvas'] . "-inside \">\n";

  // flexible_layout_render_items($renderer, $list, $owner_id)
  $content = flexible_layout_render_items($renderer, $settings['items']['canvas']['children'], $renderer->base['row'] . '-canvas');

  //flexible_layout_render_item($renderer, $item, $content, $id, $position, $max, $clear = FALSE)
  $output .= flexible_layout_render_item($renderer, $settings['items']['canvas'], $content, 'canvas', 0, 0, TRUE);

  // Wrap the whole thing up nice and snug
  $output .= "</div>\n</div>\n";

  backdrop_add_css(backdrop_get_path('module', 'flexible_layout') . '/css/flexible-admin.css');
  backdrop_add_css(backdrop_get_path('module', 'flexible_layout') . '/css/flexible.css');
  backdrop_add_js(backdrop_get_path('module', 'flexible_layout') . '/js/flexible-admin.js');
  backdrop_add_js(array('flexible' => array('resize' => url($handler->getUrl('flexible-layout', 'resize'), array('absolute' => TRUE)))), 'setting');

  return $output;
}

/**
 * Draw the flexible layout.
 */
function flexible_layout_preprocess_layout(&$vars) {
  $vars['output'] = '';
  if ($vars['layout_info']['name'] == 'flexible_template' && empty($vars['admin'])) {
    $content = array();
    $settings = $vars['settings'];
    $layout = $vars['layout'];
    $handler = $vars['renderer'];

    // Build rendrer content
    $layout_positions = array_filter($layout->positions);
    foreach ($layout_positions as $region => $blocks) {
      $content[$region] = '';
      foreach ($blocks as $uuid) {
        $content[$region] .= $handler->rendered['blocks'][$uuid];
      }
    }
    $renderer = flexible_layout_create_renderer(FALSE, $content, $settings['flexible'], $layout, $handler);

    // CSS must be generated because it reports back left/middle/right
    // positions.
    $css = flexible_layout_render_css($renderer);

    // Todo: this was cached in D7 Panels.
    backdrop_add_css($css, array('type' => 'inline', 'preprocess' => FALSE));

    $output = "<div class=\"panel-flexible " . $renderer->base['canvas'] . " clearfix\" $renderer->id_str>\n";
    $output .= "<div class=\"panel-flexible-inside " . $renderer->base['canvas'] . "-inside\">\n";

    $output .= flexible_layout_render_items($renderer, $settings['flexible']['items']['canvas']['children'], $renderer->base['canvas']);

    // Wrap the whole thing up nice and snug
    $output .= "</div>\n</div>\n";
    $vars['output'] = $output;

  }
}
