<?php
/**
 * @file
 * Flexible layout module.
 */

include_once('flexible.inc');

  
/**
 * Implements hook_menu().
 */
function flexible_layout_menu() {
  $items = array();
  $base = array(
    'access arguments' => array('administer layouts'),
    'theme callback' => 'ajax_base_page_theme',
  );

  $items['admin/structure/layouts/manage/%layout_tempstore/add-flexible-block/%/%'] = array(
    'title' => 'Add block',
    'page callback' => 'flexible_layout_block_add_page',
    'page arguments' => array(4, 6, 7),
  ) + $base;

  $items['admin/structure/layouts/manage/%layout_tempstore/flexible-layout/%/settings/%'] = array(
    'title' => 'Edit settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexible_layout_edit_settings', 4, 6, 7, 8),
  ) + $base;

  $items['admin/structure/layouts/manage/%layout_tempstore/flexible-layout/%/add/%'] = array(
    'title' => 'Add item',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexible_layout_add_item_form', 4, 6, 7, 8),
  ) + $base;

  $items['admin/structure/layouts/manage/%layout_tempstore/flexible-layout/%/remove/%'] = array(
    'title' => 'Remove item',
    'page callback' => 'flexible_layout_ajax_flexible_edit_remove',
    'page arguments' => array(4, 6, 8),
  ) + $base;

  return $items;
}

/**
 * Menu callback; Display a list of blocks to be added to a layout.
 *
 * This function is identical to the core function layout_block_add_page()
 * except the core function makes a call to layout_get_layout_template_info()
 * to ensure that the region into which the block is being added exists in the
 * template. In this case though, our regions are being created dynamically and
 * don't exist in the template, which would cause the core function to fail.
 */
function flexible_layout_block_add_page(Layout $layout, $renderer_name, $region_name, $block_key = NULL) {
  /* @var Layout $layout */
  $form_state['layout'] = $layout;

  // If a block has been selected, return the block configuration form.
  if (isset($block_key)) {
    list($module, $delta) = explode(':', $block_key);
    $block_info = layout_get_block_info($module, $delta);
    if (!$block_info) {
      return MENU_NOT_FOUND;
    }

    $block = layout_create_handler('block', $block_key);
    form_load_include($form_state, 'inc', 'layout', 'layout.admin');
    return backdrop_get_form('layout_block_configure_form', $layout, $block, $renderer_name, $region_name);
  }

  $blocks = layout_get_block_info();

  // Assemble all blocks into a single list and sort.
  $block_list = array();
  foreach ($blocks as $module => $module_blocks) {
    if (empty($module_blocks)) {
      continue;
    }
    foreach ($module_blocks as $delta => $block_info) {
      /* @var Block $parent_block */
      $parent_block = layout_create_handler('block', $module . ':' . $delta);
      $children = $parent_block->getChildren();
      if (is_array($children)) {
        foreach ($children as $child_id => $child_info) {
          // Skip blocks that don't have context requirements met.
          $required_contexts = isset($child_info['required contexts']) ? $child_info['required contexts'] : array();
          if ($layout->hasContexts($required_contexts)) {
            $block_list[$module . ':' . $delta . ':' . $child_id] = $child_info;
          }
        }
      }
      else {
        $required_contexts = isset($block_info['required contexts']) ? $block_info['required contexts'] : array();
        // Skip blocks that don't have context requirements met.
        if ($layout->hasContexts($required_contexts)) {
          $block_list[$module . ':' . $delta] = $block_info;
        }
      }
    }
  }
  backdrop_sort($block_list, array('info' => SORT_STRING));

  $output['search'] = array(
    '#type' => 'textfield',
    '#title' => 'Search',
    '#attributes' => array(
      'id' => array('layout-block-list-search'),
    ),
    // Hide the search if no JavaScript is available.
    '#wrapper_attributes' => array(
      'class' => array('js-show'),
    ),
  );
  $output['block_list'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('layout-block-list'),
    ),
  );

  $output['block_list']['block_list_inner'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('layout-block-list-wrapper'),
    ),
  );

  foreach ($block_list as $key => $block_info) {
    $output['block_list']['block_list_inner'][$key] = array(
      '#type' => 'item',
      '#markup' => l(
        $block_info['info'],
        'admin/structure/layouts/manage/' . $layout->name . '/add-flexible-block/' . $renderer_name . '/' . $region_name . '/' . $key,
        array(
          'attributes' => array(
            'class' => array('use-ajax block-item'),
            'data-dialog' => TRUE,
            'data-dialog-options' => json_encode(array('dialogClass' => 'layout-dialog')),
          )
        )
      ),
      '#description' => isset($block_info['description']) ? $block_info['description'] : NULL,
      '#wrapper_attributes' => array('class' => array('layout-block-add-row'))
    );
  }

  return $output;
}

/**
 * Implements hook_layout_renderer_info().
 */
function flexible_layout_layout_renderer_info() {
  $info['flexible'] = array(
    'class' => 'FlexibleLayoutRenderer',
  );
  $info['flexible_editor'] = array(
    'class' => 'FlexibleLayoutRendererEditor',
  );
  return $info;
}

/**
 * Implements hook_autoload_info().
 */
function flexible_layout_autoload_info() {
  return array(
    'FlexibleLayoutRenderer' => 'renderers/flexible_renderer_standard.inc',
    'FlexibleLayoutRendererEditor' => 'renderers/flexible_renderer_editor.inc',
  );
}


function flexible_layout_layout_presave($layout) {
  if ($layout->layout_template == 'flexible_template' && empty($layout->settings['flexible'])) {
    $layout->settings['flexible'] = layout_flexible_default_settings();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Used here to override the default layout renderer.
 */
function flexible_layout_form_layout_content_form_alter(&$form, &$form_state, $form_id) {
  $layout = $form_state['layout'];
  if ($layout->layout_template == 'flexible_template') {
    $renderer = layout_create_renderer('flexible_editor', $layout);
    $form['content']['display'] = array(
      '#markup' => $renderer->render(),
    );

    foreach ($renderer->layout_info['regions'] as $region_id => $title) {
      // Make sure we at least have an empty array for all possible locations.
      if (!isset($layout->positions[$region_id])) {
        $layout->positions[$region_id] = array();
      }

      $form['content']['positions'][$region_id] = array(
        // Use 'hidden' instead of 'value' so the JS can access it.
        '#type' => 'hidden',
        '#default_value' => implode(',', $layout->positions[$region_id]),
      );
    }
  }
}

/**
 * Implements hook_theme()
 */
function flexible_layout_theme() {
  $items = array(
    'build_flexible_layout' => array(
      'variables' => array('content' => NULL, 'settings' => NULL, 'layout' => NULL, 'renderer' => NULL),
    ),
  );
  return $items;
}

/**
 * Builds the flexible layout block add page.
 */
function theme_build_flexible_layout($vars) {
  $content = $vars['content'];
  $settings = $vars['layout']->settings['flexible'];
  $layout = $vars['layout'];
  $handler = $vars['renderer'];

  $output = '';
  $renderer = flexible_layout_create_renderer(TRUE, $content, $settings, $layout, $handler);

  $css = flexible_layout_render_css($renderer);

  // For the administrative view, add CSS directly to head.
  backdrop_add_css($css, array('type' => 'inline', 'preprocess' => FALSE));

  $output = "<div class=\"panel-flexible " . $renderer->base['canvas'] . " clearfix panel-flexible-admin panel-flexible-edit-layout\" $renderer->id_str>\n";

  $output .= "<div class=\"panel-flexible-inside " . $renderer->base['canvas'] . "-inside \">\n";

  // flexible_layout_render_items($renderer, $list, $owner_id)
  $content = flexible_layout_render_items($renderer, $settings['items']['canvas']['children'], $renderer->base['row'] . '-canvas');

  //flexible_layout_render_item($renderer, $item, $content, $id, $position, $max, $clear = FALSE)
  $output .= flexible_layout_render_item($renderer, $settings['items']['canvas'], $content, 'canvas', 0, 0, TRUE);

  // Wrap the whole thing up nice and snug
  $output .= "</div>\n</div>\n";

  backdrop_add_css(backdrop_get_path('module', 'flexible_layout') . '/css/flexible-admin.css');
  backdrop_add_css(backdrop_get_path('module', 'flexible_layout') . '/css/flexible.css');
  backdrop_add_js(backdrop_get_path('module', 'flexible_layout') . '/js/flexible-admin.js');
  backdrop_add_js(array('flexible' => array('resize' => url($handler->getUrl('layout', 'resize'), array('absolute' => TRUE)))), 'setting');
  return $output;
}

/**
 * Define the actual list of columns and rows for this flexible panel.
 */
function flexible_get_regions($settings) {
  $items = array();
  foreach ($settings['items'] as $id => $item) {
    // Remove garbage values.
    if (!isset($item['type'])) {
      unset($items[$id]);
    }
    else if ($item['type'] == 'region') {
      $items[$id] = $item['title'];
    }
  }

  return $items;
}

/**
 * Provides the default template for new layouts.
 */
function layout_flexible_default_settings() {
  // set up a default
  $settings = array(
    'items' => array(
      // The 'canvas' is a special row that does not get rendered
      // normally, but is used to contain the columns.
      'canvas' => array(
        'type' => 'row',
        'contains' => 'column',
        'children' => array('main'),
        'parent' => NULL,
      ),
      'main' => array(
        'type' => 'column',
        'width' => 100,
        'width_type' => '%',
        'children' => array('main-row'),
        'parent' => 'canvas',
      ),
      'main-row' => array(
        'type' => 'row',
        'contains' => 'region',
        'children' => array('center'),
        'parent' => 'main',
      ),
      'center' => array(
        'type' => 'region',
        'title' => t('Center'),
        'width' => 100,
        'width_type' => '%',
        'parent' => 'main-row',
      ),
    ),
  );

  return $settings;
}

